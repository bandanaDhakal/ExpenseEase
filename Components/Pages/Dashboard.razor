@page "/"
@using ExpenseEase.Models
@inject NavigationManager NavigationManager
@inject UserService UserService

<div class="dashboard-container">
    <!-- Sidebar Section -->
    <aside class="sidebar">
        <h2>ExpenseTracker</h2>
        <nav class="menu">
            <a href="/" class="menu-item active">Dashboard</a>
            <a href="/transactions" class="menu-item">Transactions</a>
            <a href="/debts" class="menu-item">Debts</a>
        </nav>
        <button class="logout-btn" @onclick="Logout">Logout</button>
    </aside>

    <main class="main-content">
        <header class="header">
            <input type="text" class="search-bar" placeholder="Search by amount..." @oninput="FilterTransactions" />

            <!-- Date Range Filters -->
            <div class="date-filters">
                <input type="date" @bind="startDate" />
                <input type="date" @bind="endDate" />
                <button class="filter-btn" @onclick="FilterByDateRange">Filter</button>
            </div>
        </header>

        <!-- Dashboard Highlights -->
        <section class="dashboard-highlights">
            <div class="highlight">
                <h3>Total Transactions</h3>
                <p>@Data.Transactions.Count</p>
            </div>
            <div class="highlight">
                <h3>Total Balance</h3>
                <p>@(Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit)) @Currency</p> <!-- Display currency -->
            </div>
            <div class="highlight">
                <h3>Highest Inflow</h3>
                <p>@highestInflow @Currency</p> <!-- Display currency -->
            </div>
            <div class="highlight">
                <h3>Highest Outflow</h3>
                <p>@highestOutflow @Currency</p> <!-- Display currency -->
            </div>
            <div class="highlight">
                <h3>Lowest Inflow</h3>
                <p>@lowestInflow @Currency</p> <!-- Display currency -->
            </div>
            <div class="highlight">
                <h3>Lowest Outflow</h3>
                <p>@lowestOutflow @Currency</p> <!-- Display currency -->
            </div>
            <div class="highlight">
                <h3>Remaining Debt</h3>
                <p>@remainingDebt @Currency</p> <!-- Display currency -->
            </div>
        </section>

        <!-- Pending Debts -->
        <section class="pending-debts">
            <h2>Pending Debts</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Remaining Debt</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in pendingDebts)
                    {
                        <tr>
                            <td>@Data.Users.FirstOrDefault(u => u.Id == debt.UserId)?.Name</td>
                            <td>@(debt.Amount - debt.PaidAmount) @Currency</td> <!-- Display currency -->
                            <td>@debt.Description</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>

        <!-- Transactions Table -->
        <section class="transactions">
            <h2>Transactions</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Debit</th>
                        <th>Credit</th>
                        <th>Date</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in filteredTransactions)
                    {
                        <tr>
                            <td>@transaction.Id</td>
                            <td>@transaction.Debit @Currency</td> <!-- Display currency -->
                            <td>@transaction.Credit @Currency</td> <!-- Display currency -->
                            <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                            <td>@transaction.Description</td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>

        <!-- Popup Modal for No Matching Transactions -->
        @if (showPopup)
        {
            <div class="popup-modal">
                <div class="popup-content">
                    <p>@dateErrorMessage</p>
                    <button @onclick="ClosePopup">Close</button>
                </div>
            </div>
        }
    </main>
</div>

@code {
    private AppData Data;
    private List<Transaction> filteredTransactions;
    private List<Debt> pendingDebts;
    private decimal highestInflow;
    private decimal highestOutflow;
    private decimal lowestInflow;
    private decimal lowestOutflow;
    private decimal remainingDebt;
    private Debt? lowestDebtTransaction;
    private string Currency = "USD"; // Default currency

    // Date range fields
    private DateTime? startDate;
    private DateTime? endDate;
    private string searchQuery = string.Empty;
    private decimal? amountSearchQuery;


    private string amountErrorMessage;
    private string dateErrorMessage;
    private bool showPopup = false;

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();
        filteredTransactions = Data.Transactions;
        UpdateCurrencyFromQuery();
        // UpdateDashboardData();

        // Get the currency from the query string
        // var uri = NavigationManager.Uri;
        // var queryParams = new Uri(uri).Query;
        // var queryDictionary = System.Web.HttpUtility.ParseQueryString(queryParams);
        // Currency = queryDictionary["currency"] ?? "USD"; Default to USD if no currency is passed

        if (Data.Transactions.Any())
        {
            highestInflow = Data.Transactions.Max(t => t.Credit);
            highestOutflow = Data.Transactions.Max(t => t.Debit);
            lowestInflow = Data.Transactions.Min(t => t.Credit);
            lowestOutflow = Data.Transactions.Min(t => t.Debit);
        }
        else
        {
            highestInflow = 0;
            highestOutflow = 0;
            lowestInflow = 0;
            lowestOutflow = 0;
        }

        // Calculating Remaining Debt
        remainingDebt = Data.Debts.Where(d => d.Amount > d.PaidAmount).Sum(d => d.Amount - d.PaidAmount);

        pendingDebts = Data.Debts.Where(d => d.Amount > d.PaidAmount).ToList();
        lowestDebtTransaction = pendingDebts.OrderBy(d => d.Amount - d.PaidAmount).FirstOrDefault();
    }
    protected override void OnParametersSet()
    {
        UpdateCurrencyFromQuery();
        // UpdateDashboardData();
    }

    private void UpdateCurrencyFromQuery()
    {
        var uri = NavigationManager.Uri;
        var queryParams = new Uri(uri).Query;
        var queryDictionary = System.Web.HttpUtility.ParseQueryString(queryParams);
        Currency = queryDictionary["currency"] ?? "USD"; // Default to USD if no currency is passed
    }



    private void FilterByDateRange()
    {
        filteredTransactions = Data.Transactions
            .Where(t =>
                (!amountSearchQuery.HasValue || t.Debit == amountSearchQuery || t.Credit == amountSearchQuery) &&
                (!startDate.HasValue || t.Date >= startDate) &&
                (!endDate.HasValue || t.Date <= endDate))
            .ToList();

        // Show alert if no transactions match the selected date range
        if (!filteredTransactions.Any())
        {
            dateErrorMessage = "No transactions found !";
            showPopup = true;
            StateHasChanged();
        }
        else
        {
            dateErrorMessage = string.Empty;
            showPopup = false; // Hide popup
        }
    }

    private void FilterTransactions(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var amount))
        {
            amountSearchQuery = amount;
            amountErrorMessage = string.Empty; // Reset error message
        }
        else
        {
            amountSearchQuery = null;
            amountErrorMessage = "Amount not found!";
        }

        FilterByDateRange();
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void ClosePopup()
    {
        showPopup = false;
    }
}