@page "/login"
@using ExpenseEase.Components.Layout
@layout FirstLayout
@using ExpenseEase.Models
<meta name="viewport" content="width=device-width, initial-scale=1.0" />

@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="login-box">
        <h3>Log In!</h3>
        <form class="login-form">
            <input @bind="LoginUsername" placeholder="Username" class="input-field" />
            <input @bind="LoginPassword" placeholder="Password" type="password" class="input-field" />
            <select @bind="SelectedCurrency" class="input-field">
                <option value="" disabled selected>Currency Type</option>
                <option value="USD">USD</option>
                <option value="NPR">NPR</option>
            </select>
            <button type="button" @onclick="async () => await ValidateForm()" class="btn">Log In</button>
        </form>
        <p>Don't have an account? <a href="/register" class="link">Sign up</a></p>
        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="@MessageClass">@Message</p>
        }
    </div>
    <div class="img-content">
        <img src="images/background.png" alt="Budget and calculator" class="login-image" />
    </div>
</div>

@code {
    private string LoginUsername = "";
    private string LoginPassword = "";
    private string SelectedCurrency = "";
    private string Message = "";
    private string MessageClass = ""; // CSS class for styling the message

    private List<User> Users = new();

    protected override void OnInitialized()
    {
        Users = UserService.LoadUsers();
    }

    private async Task ValidateForm()
    {
        if (string.IsNullOrEmpty(LoginUsername) || string.IsNullOrEmpty(LoginPassword) || string.IsNullOrEmpty(SelectedCurrency))
        {
            Message = "Please fill in all fields.";
            MessageClass = "error-message";
        }
        else
        {
            await LoginPage();
        }
    }

    private async Task LoginPage()
    {
        var user = Users.FirstOrDefault(u => u.Name == LoginUsername);

        if (user == null)
        {
            // Username not found
            Message = "Username not found.";
            MessageClass = "error-message";
        }
        else if (UserService.ValidatePassword(LoginPassword, user.Password))
        {
            // Successful login
            Message = "Logged in successfully, redirecting to dashboard...";
            MessageClass = "success-message";

            // Delay for 2 seconds to show the message before redirection
            await Task.Delay(2000);

            // Redirect with currency query string
            NavigationManager.NavigateTo($"/?currency={SelectedCurrency}");
        }
        else
        {
            // Password mismatch
            Message = "Password does not match.";
            MessageClass = "error-message";
        }
    }
}