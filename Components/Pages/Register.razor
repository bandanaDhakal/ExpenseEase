@page "/register"
@using ExpenseEase.Components.Layout
@using ExpenseEase.Models
@layout FirstLayout
@inject UserService UserService
@inject NavigationManager NavigationManager

<div class="signup-container">
    <div class="signup-box">
        <h3>Sign Up!</h3>
        <form class="signup-form">
            <input @bind="RegisterUsername" placeholder="Name" class="input-field" />
            <input @bind="RegisterEmail" placeholder="Email" class="input-field" type="email" />
            <input @bind="RegisterPassword" placeholder="Password" type="password" class="input-field" />
            <input @bind="ConfirmPassword" placeholder="Confirm Password" type="password" class="input-field" />
            <button type="button" @onclick="RegisterPage" class="btn">Sign up</button>
        </form>
        <p>Already have an account? <a href="/login" class="link">Log in</a></p>
        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="error-message">@Message</p>
        }
    </div>
    <div class="img-content">
        <img src="images/background.png" alt="Budget and calculator" class="signup-image" />
    </div>
</div>

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string ConfirmPassword = "";
    private string RegisterEmail = "";
    private string Message = "";

    private List<User> Users = new();

    protected override void OnInitialized()
    {
        Users = UserService.LoadUsers();
    }

    private void RegisterPage()
    {
        if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword))
        {
            Message = "Username and password are required.";
            return;
        }

        // Check if the username already exists
        var existingUser = Users.FirstOrDefault(u => u.Name == RegisterUsername);
        if (existingUser != null)
        {
            Message = "Username already exists.";
            return;
        }

        // Check if passwords match
        if (RegisterPassword != ConfirmPassword)
        {
            Message = "Passwords do not match.";
            return;
        }

        // If validation passes, register the new user
        var newUser = new User
            {
                Name = RegisterUsername,
                Password = UserService.HashPassword(RegisterPassword),
                Email = RegisterEmail
            };

        Users.Add(newUser);
        UserService.SaveUsers(Users);

        Message = "Registration successful. Redirecting to login...";
        Task.Delay(2000).ContinueWith(_ => NavigationManager.NavigateTo("/login"));
    }
}