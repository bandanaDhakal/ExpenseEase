@page "/transactions"
@using ExpenseEase.Models
@inject NavigationManager NavigationManager
@inject UserService UserService

<div class="dashboard-container">
    <!-- Sidebar Section -->
    <aside class="sidebar">
        <h2>ExpenseTracker</h2>
        <nav class="menu">
            <a href="/" class="menu-item">Dashboard</a>
            <a href="/transactions" class="menu-item active">Transactions</a>
            <a href="/debts" class="menu-item">Debts</a>
        </nav>
        <button class="logout-btn" @onclick="Logout">Logout</button>
    </aside>

    <div class="main-container">
        <main class="main-content">
            <!-- Search and Filter Section -->
            <h2>Transactions</h2>

            @if (totalBalance == 0)
            {
                <!-- Form to Set Initial Balance -->
                <div class="initial-balance-section">
                    <h3>Please set your initial balance @currency </h3>
                    <EditForm Model="initialBalance" OnValidSubmit="SetInitialBalance">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="initialBalance">(@currency) Initial Balance</label>
                            <InputNumber id="initialBalance" @bind-Value="initialBalance" class="form-control" />
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Set Balance</button>
                        </div>
                    </EditForm>
                </div>
            }
            else
            {
                <!-- Total Balance Box -->
                <div class="balance-container">
                    <h3>Total Balance: <span>@currency @totalBalance</span></h3>
                </div>

                <div class="filter-section">
                    <div>
                        <label for="transactionType">Type:</label>
                        <select id="transactionType" @bind="selectedType">
                            <option value="">All</option>
                            <option value="debit">Debit</option>
                            <option value="credit">Credit</option>
                        </select>
                    </div>

                    <div>
                        <label for="tagsFilter">Tags:</label>
                        <input id="tagsFilter" type="text" @bind="filterTagsInput" placeholder="Enter tags separated by commas" />
                    </div>

                    <div>
                        <label for="dateRangeStart">Date Range Start:</label>
                        <InputDate @bind-Value="dateRangeStart" TValue="DateTime?" id="dateRangeStart" />
                    </div>

                    <div>
                        <label for="dateRangeEnd">Date Range End:</label>
                        <InputDate @bind-Value="dateRangeEnd" TValue="DateTime?" id="dateRangeEnd" />
                    </div>

                    <div>
                        <label for="sortOrder">Sort Order:</label>
                        <select id="sortOrder" @bind="sortOrder">
                            <option value="ascending">Oldest to Newest</option>
                            <option value="descending">Newest to Oldest</option>
                        </select>
                    </div>

                    <button @onclick="ApplyFilters" class="btn btn-primary">Apply Filters</button>
                </div>

                <!-- Transaction Table -->
                <h2>Transactions</h2>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Transaction ID</th>
                            <th>Main Balance</th>
                            <th>Debit</th>
                            <th>Credit</th>
                            <th>Date</th>
                            <th>Description</th>
                            <th>Tags</th>
                            <th>Action</th> <!-- Column for delete button -->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in filteredTransactions)
                        {
                            <tr>
                                <td>@transaction.Id</td>
                                <td>@totalBalance</td>
                                <!-- Show debit and credit amounts unconditionally -->
                                <td>@currency @transaction.Debit</td>
                                <td>@currency @transaction.Credit</td>
                                <td> @transaction.Date.ToString("MM/dd/yyyy")</td>
                                <td> @transaction.Description</td>
                                <td>@currency @string.Join(", ", transaction.Tags ?? new List<string>())</td>
                                <td>
                                    <!-- Delete button for each transaction -->
                                    <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Balance Warning -->
                @if (!string.IsNullOrEmpty(balanceWarning))
                {
                    <div class="alert warning">
                        <span>@balanceWarning</span>
                        <button class="close-btn" @onclick="() => balanceWarning = string.Empty">×</button>
                    </div>
                }

                <!-- Date Not Found Warning -->
                @if (!string.IsNullOrEmpty(dateWarning))
                {
                    <div class="alert warning">
                        <span>@dateWarning</span>
                        <button class="close-btn" @onclick="() => dateWarning = string.Empty">×</button>
                    </div>
                }

                <!-- Add New Transaction Form -->
                <div class="add-transaction-section">
                    <h2>Add New Transaction</h2>
                    <EditForm Model="newTransaction" OnValidSubmit="HandleTransactionSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (selectedType == "debit" || selectedType == "")
                        {
                            <div class="form-group">
                                <label for="debit">Debit</label>
                                <InputNumber id="debit" @bind-Value="newTransaction.Debit" class="form-control" />
                            </div>
                        }

                        @if (selectedType == "credit" || selectedType == "")
                        {
                            <div class="form-group">
                                <label for="credit">Credit</label>
                                <InputNumber id="credit" @bind-Value="newTransaction.Credit" class="form-control" />
                            </div>
                        }

                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputText id="description" @bind-Value="newTransaction.Description" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="tags">Tags</label>
                            <InputText id="tags" placeholder="Enter tags separated by commas" @bind-Value="tagsInput" class="form-control" />
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-primary">Add Transaction</button>
                        </div>
                    </EditForm>
                </div>

                <!-- Success Popup -->
                @if (isTransactionSuccessful)
                {
                    <div class="popup-message">
                        <div class="popup-content">
                            <span class="popup-close" @onclick="ClosePopup">×</span>
                            <h3>Transaction Added Successfully!</h3>
                            <p>Your transaction has been successfully added to the system.</p>
                        </div>
                    </div>
                }
            }
        </main>
    </div>
</div>

@code {
    private AppData Data;
    private string currency = "USD"; // Default currency
    private string tagsInput = string.Empty;
    private List<Transaction> filteredTransactions;
    private string selectedType = string.Empty;
    private string filterTagsInput = string.Empty;
    private DateTime? dateRangeStart;
    private DateTime? dateRangeEnd;
    private string balanceWarning = string.Empty;
    private string dateWarning = string.Empty;
    private Transaction newTransaction = new Transaction();
    private string sortOrder = "ascending";
    private bool isTransactionSuccessful = false;
    private decimal totalBalance;
    private decimal initialBalance;

    protected override void OnInitialized()
    {
        Data = UserService.LoadData();
        filteredTransactions = Data.Transactions.ToList();
        totalBalance = Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit);
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        currency = query["currency"] ?? "USD"; // Fetch currency from query string
    }

    private void ApplyFilters()
    {
        filteredTransactions = Data.Transactions.ToList();
        balanceWarning = string.Empty;
        dateWarning = string.Empty;

        if (!string.IsNullOrEmpty(selectedType))
        {
            filteredTransactions = filteredTransactions.Where(t =>
                (selectedType == "debit" && t.Debit > 0) || (selectedType == "credit" && t.Credit > 0)).ToList();
        }

        decimal totalDebit = filteredTransactions.Sum(t => t.Debit);
        if (selectedType == "debit" && totalDebit > totalBalance)
        {
            balanceWarning = "Insufficient balance for the selected debit transactions.";
            filteredTransactions = new List<Transaction>();
        }

        if (!string.IsNullOrEmpty(filterTagsInput))
        {
            var tags = filterTagsInput.Split(',').Select(tag => tag.Trim()).ToList();
            filteredTransactions = filteredTransactions
                .Where(t => t.Tags != null && t.Tags.Any(tag => tags.Contains(tag)))
                .ToList();
        }

        if (dateRangeStart.HasValue)
        {
            filteredTransactions = filteredTransactions
                .Where(t => t.Date >= dateRangeStart.Value).ToList();
        }

        if (dateRangeEnd.HasValue)
        {
            filteredTransactions = filteredTransactions
                .Where(t => t.Date <= dateRangeEnd.Value).ToList();
        }

        if (!filteredTransactions.Any() && (dateRangeStart.HasValue || dateRangeEnd.HasValue))
        {
            dateWarning = "No transactions found for the selected date range.";
        }

        if (sortOrder == "ascending")
        {
            filteredTransactions = filteredTransactions.OrderBy(t => t.Date).ToList();
        }
        else
        {
            filteredTransactions = filteredTransactions.OrderByDescending(t => t.Date).ToList();
        }
    }

    private void Logout()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void SetInitialBalance()
    {
        totalBalance = initialBalance;
        Data.UserBalance = initialBalance;  // Save this balance if necessary
        UserService.SaveData(Data);
        initialBalance = 0;  // Reset the form after submission
    }

    private void HandleTransactionSubmit()
    {
        // Check if the debit amount exceeds the available balance
        if (newTransaction.Debit > totalBalance)
        {
            balanceWarning = "Insufficient balance for the transaction.";
            return; // Prevent submitting the form if the balance is insufficient
        }

        // Process the transaction if the balance is sufficient
        newTransaction.Tags = tagsInput.Split(',')
            .Select(tag => tag.Trim())
            .Where(tag => !string.IsNullOrEmpty(tag))
            .ToList();

        newTransaction.Id = Data.Transactions.Count + 1;
        newTransaction.Date = DateTime.Now;

        Data.Transactions.Add(newTransaction);
        UserService.SaveData(Data);
        filteredTransactions.Add(newTransaction);

        // Update the total balance
        totalBalance = Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit);

        isTransactionSuccessful = true;
        newTransaction = new Transaction();
        tagsInput = string.Empty;
    }

    private void ClosePopup()
    {
        isTransactionSuccessful = false;
    }

    private void DeleteTransaction(Transaction transaction)
    {
        // Remove the transaction from the list
        Data.Transactions.Remove(transaction);
        filteredTransactions.Remove(transaction);

        // Save the updated data
        UserService.SaveData(Data);

        // Update the total balance
        totalBalance = Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit);
    }
}